{"version":3,"sources":["logo.svg","components/Question.js","components/GeneratedCode.js","components/Html.js","pages/home.js","htmlCompTemplate/Template1.js","components/SettingsPannel.js","components/GeneratedHTMLCode.js","pages/htmlGenerator.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","input","width","marginRight","question","margin","display","removeBtn","maxWidth","minWidth","borderRadius","border","fontWeight","color","fontSize","background","button","marginTop","Questions","props","questions","setQuestions","classes","map","el","index","className","TextField","id","label","value","onChange","e","target","updateJsonBody","answer","Button","variant","onClick","newQ","filter","deleteQuestion","push","JSONPrettyMon","require","JSONPretty","generatedCodeWrapper","GeneratedCode","innerHTML","title","generatedCode","data","textField","Html","useState","text","setText","multiline","rows","replace","console","log","questionsRes","matchAll","answersRes","newQuestions","forEach","indx","generateHTML","paper","padding","spacing","palette","secondary","titleInput","jsonBodyStructure","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","Home","setValue","setTitle","jsonBody","setJsonBody","q","mainEntity","component","Grid","container","item","md","Paper","AppBar","position","Tabs","event","newValue","aria-label","Tab","v","template","settings","CSS","src","javascript","style","textColor","borderColor","backgroundColor","$","parent","toggleClass","find","slideToggle","SettingsPannel","setSettings","defaultValues","setDefaultValues","timeoutFunction","func","window","currentRunningFunc","clearTimeout","setTimeout","handleOnChange","key","val","a","hex","FormControl","FormControlLabel","control","name","labelPlacement","GeneratedHTMLCode","language","dark","codeString","body","genButton","tabValue","setTabValue","HTMLCode","setHTMLCode","setHtmlBody","updateHtmlBody","JSON","stringify","xs","document","getElementById","onCopy","alert","App","ThemeProvider","ex","exact","path","HtmlGenerator","ReactDOM","render","StrictMode"],"mappings":"4PAAe,I,iKCITA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAQ,CACJC,MAAO,MACPC,YAAY,MAEhBC,SAAS,CACLC,OAAQ,SACRC,QAAS,QAEbC,UAAU,CACNC,SAAS,kBACTC,SAAS,kBACTC,aAAa,MACbC,OAAO,OACPC,WAAW,SACXC,MAAM,QACNC,SAAS,GACTC,WAAW,WAEfC,OAAO,CACHC,UAAU,QAQX,SAAUC,EAAUC,GAAO,IACvBC,EAA2BD,EAA3BC,UAAWC,EAAgBF,EAAhBE,aACZC,EAAUxB,IAehB,OACI,gCACKsB,EAAUG,KAAI,SAACC,EAAIC,GAChB,OACI,sBAAiBC,UAAWJ,EAAQlB,SAApC,UACI,cAACuB,EAAA,EAAD,CAEAC,GAAI,KAAOH,EACXI,MAAM,WACNC,MAAON,EAAGpB,SACVsB,UAAWJ,EAAQrB,MACnB8B,SAAU,SAACC,GACPZ,EAAUK,GAAOrB,SAAW4B,EAAEC,OAAOH,MACrCT,EAAa,YAAID,IACjBD,EAAMe,eAAed,KARpB,KAAOK,GAWZ,cAACE,EAAA,EAAD,CAEAC,GAAI,KAAOH,EACXI,MAAM,SACNC,MAAON,EAAGW,OACVT,UAAWJ,EAAQrB,MACnB8B,SAAU,SAACC,GACPZ,EAAUK,GAAOU,OAASH,EAAEC,OAAOH,MACnCT,EAAa,YAAID,IACjBD,EAAMe,eAAed,KARpB,KAAOK,GAWZ,cAACW,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,YAAYyB,QAAS,YApCpD,SAACV,GACpB,IAAMW,EAAQnB,EAAUoB,QAAO,SAAChB,EAAIC,GAChC,OAAOA,IAAUG,KAErBP,EAAakB,GACbpB,EAAMe,eAAeK,GA+BuDE,CAAehB,IAASC,UAAWJ,EAAQf,UAAvG,iBAzBMkB,MA6BlB,cAACW,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,UAAUa,UAAWJ,EAAQN,OAAQsB,QA7C3D,WAChBlB,EAAUsB,KAAK,CAAEtC,SAAU,GAAI+B,OAAO,KACtCd,EAAa,YAAID,IACjBD,EAAMe,kBA0CF,6B,qBChFRS,EAAgBC,EAAQ,KACxBC,EAAaD,EAAQ,KAGnB9C,EAAYC,aAAW,SAACC,GAAD,MAAY,CAIrC8C,qBAAsB,CAClB/B,WAAW,UACXF,MAAM,aAIP,SAASkC,EAAc5B,GAC1B,IAAMG,EAAUxB,IAChB,OACI,sBAAK4B,UAAWJ,EAAQwB,qBAAxB,UACI,cAAC,IAAD,CAAWE,WAAW,EAAtB,0BAAwC7B,EAAM8B,MAA9C,gDACA,cAAC,IAAD,CAAWD,WAAW,EAAtB,iDACA,cAACH,EAAD,CAAYnB,UAAWJ,EAAQ4B,cAAgBlD,MAAO2C,EAAef,GAAG,cAAcuB,KAAMhC,EAAMC,YAClG,cAAC,IAAD,CAAW4B,WAAW,EAAtB,2BCnBZ,IAAMlD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCoD,UAAU,CACNlD,MAAM,QAEVc,OAAO,CACHC,UAAU,QAOX,SAASoC,EAAKlC,GACjB,IAAMG,EAAUxB,IADQ,EAEAwD,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,KAGNnC,GAAgCF,EAA3CC,UAA2CD,EAAhCE,cAAca,EAAkBf,EAAlBe,eAmBhC,OACI,gCACI,cAACP,EAAA,EAAD,CACIC,GAAG,0BACHC,MAAM,OACN4B,WAAS,EACTC,KAAM,GACN5B,MAAOyB,EACP7B,UAAWJ,EAAQ8B,UACnBf,QAAQ,SACRN,SAAU,SAACP,GAAMgC,EAAQhC,EAAGS,OAAOH,UAEvC,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYX,UAAWJ,EAAQN,OAAQH,MAAM,UAAUyB,QAAS,YA7BnE,SAACiB,GAGlBA,EAAOA,EAAKI,QAAQ,iBAAkB,IACtCC,QAAQC,IAAIN,GACZ,IAAMO,EAAe,YAAIP,EAAKQ,SAJR,sBAIiCxC,KAAI,SAAAC,GAAK,OAAOA,EAAG,GAAGmC,QAAQ,WAAW,OAC1FK,EAAa,YAAIT,EAAKQ,SAJR,sBAI+BxC,KAAI,SAAAC,GAAK,OAAOA,EAAG,GAAGmC,QAAQ,WAAW,OACxFM,EAAe,GACnBH,EAAaI,SAAQ,SAAC1C,EAAI2C,GACtBF,EAAavB,KAAK,CACdtC,SAAUoB,EACVW,OAAQ6B,EAAWG,QAG3B9C,EAAa4C,GACb/B,EAAe+B,GAc4EG,CAAab,EAAO,SAA3G,yBCzCZ,IAAMzD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCqE,MAAO,CACHC,QAAStE,EAAMuE,QAAQ,GACvB1D,MAAOb,EAAMwE,QAAQjB,KAAKkB,WAE9BxE,MAAO,CACHC,MAAO,QAEXwE,WAAY,CACRxE,MAAO,MACPG,OAAO,UAGTsE,EAAoB,CACtB,WAAY,qBACZ,QAAS,UACT,WAAc,IAGlB,SAASC,EAASzD,GAAQ,IACd0D,EAAqC1D,EAArC0D,SAAU/C,EAA2BX,EAA3BW,MAAOL,EAAoBN,EAApBM,MAAUqD,EADd,YACwB3D,EADxB,8BAGrB,OACI,6CACI4D,KAAK,WACLC,OAAQlD,IAAUL,EAClBG,GAAE,0BAAqBH,GACvBwD,kBAAA,qBAA+BxD,IAC3BqD,GALR,aAOKhD,IAAUL,GACP,cAACyD,EAAA,EAAD,CAAKC,EAAG,EAAR,SACI,cAACC,EAAA,EAAD,UAAaP,SAajC,SAASQ,EAAU5D,GACf,MAAO,CACHG,GAAG,cAAD,OAAgBH,GAClB,gBAAgB,mBAAhB,OAAoCA,IAI7B,SAAS6D,IAAQ,IAAD,EACDhC,mBAAS,GADR,mBACpBxB,EADoB,KACbyD,EADa,KAErBjE,EAAUxB,IAFW,EAUDwD,mBAAS,IAVR,mBAUpBL,EAVoB,KAUbuC,EAVa,OAWOlC,mBAAS,IAXhB,mBAWpBlC,EAXoB,KAWTC,EAXS,OAYKiC,mBAASqB,GAZd,mBAYpBc,EAZoB,KAYVC,EAZU,KAarBxD,EAAiB,SAACyD,GACpBF,EAASG,YAAcD,GAAKvE,GAAWG,KAAI,SAAAC,GACvC,MAAO,CACH,QAAS,WACT,KAAQA,EAAGpB,SACX,eAAkB,CACd,QAAS,SACT,KAAQoB,EAAGW,YAIvBuD,EAAYD,IAGhB,OACI,gCACI,cAACL,EAAA,EAAD,CAAY/C,QAAQ,KAAKwD,UAAU,KAAnC,kCAGA,uBACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACxB,QAAS,EAAzB,UACI,cAACuB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACI,eAACC,EAAA,EAAD,CAAOxE,UAAWJ,EAAQ+C,MAA1B,UACI,cAAC8B,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAMvE,MAAOA,EAAOC,SA9BpB,SAACuE,EAAOC,GAC5BhB,EAASgB,IA6B0DC,aAAW,sBAA1D,UACI,cAACC,EAAA,EAAD,aAAK5E,MAAM,WAAcwD,EAAU,KACnC,cAACoB,EAAA,EAAD,aAAK5E,MAAM,QAAWwD,EAAU,UAGxC,cAAC1D,EAAA,EAAD,CACQC,GAAG,aACHC,MAAM,QACNH,UAAWJ,EAAQoD,WACnB5C,MAAOmB,EACPlB,SAAU,SAAC2E,GAAQlB,EAASkB,EAAEzE,OAAOH,OAAQ8B,QAAQC,IAAI6C,MAEjE,cAAC9B,EAAD,CAAU9C,MAAOA,EAAOL,MAAO,EAA/B,SACI,cAACP,EAAD,CAAWE,UAAWA,EAAWc,eAAgBA,EAAgBb,aAAcA,MAEnF,cAACuD,EAAD,CAAU9C,MAAOA,EAAOL,MAAO,EAA/B,SACI,cAAC4B,EAAD,CAAMjC,UAAWA,EAAWc,eAAgBA,EAAgBb,aAAcA,WAItF,cAACyE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACI,cAAClD,EAAD,CAAeE,MAAOA,EAAO7B,UAAWqE,Y,6BCrG7C,SAASkB,EAASxF,GAAQ,IAC7BC,EAAwBD,EAAxBC,UAAWwF,EAAazF,EAAbyF,SAEnB,OAEI,0BAAShF,GAAG,eAAZ,UACI,gCACKiF,IAEL,wBAAQC,IAAI,qEACZ,iCACKC,IAEL,qBAAKrF,UAAU,GAAf,SAEI,oBAAIA,UAAU,cAAcsF,MAAO,CAACnG,MAAO+F,EAASK,WAApD,SACK7F,EAAUG,KAAI,SAACC,EAAIC,GAChB,OAEI,qBAAgBuF,MAAO,CAACE,YAAaN,EAASM,YAAaC,gBAAiBP,EAASO,iBAArF,UACI,qBAAK7E,QAAS,SAACN,GAAKoF,IAAEpF,EAAEC,QAAQoF,OAAO,MAAMC,YAAY,iBAAiBC,KAAK,gBAAgBC,eAAiB9F,UAAU,iBAA1H,cAA6IF,EAAGpB,YAChJ,mBAAGsB,UAAU,sBAAb,SACIF,EAAGW,WAHFV,aAerC,IAAMsF,EAAU,wLAOVF,EAAG,2/B,4DCtDS9G,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,MAAO,MACPC,YAAa,MAEjBC,SAAU,CACNC,OAAQ,SACRC,QAAS,QAEbC,UAAW,CACPC,SAAU,kBACVC,SAAU,kBACVC,aAAc,MACdC,OAAQ,OACRC,WAAY,SACZC,MAAO,QACPC,SAAU,GACVC,WAAY,WAEhBC,OAAQ,CACJC,UAAW,QAQZ,SAASwG,EAAetG,GAAQ,IAC3BuG,EAA0BvG,EAA1BuG,YAAad,EAAazF,EAAbyF,SADa,EAEQtD,mBAAS,CAC/C2D,UAAYL,EAASK,WAAa,UAClCE,gBAAkBP,EAASO,iBAAmB,UAC9CD,YAAcN,EAASM,aAAe,YALR,mBAE3BS,EAF2B,KAEZC,EAFY,KAQ5BC,EAAkB,SAACC,GACjBC,OAAOC,oBACPC,aAAaF,OAAOC,oBAExBD,OAAOC,mBAAqBE,YAAW,WACnCJ,IACAC,OAAOC,oBAAqB,IAC7B,MAIDG,EAAc,uCAAG,WAAOC,EAAKC,GAAZ,SAAAC,EAAA,sDACnBV,EAAiB,2BAAKD,GAAN,kBAAsBS,EAAMC,KAC5CX,EAAY,2BAAKd,GAAN,kBAAiBwB,EAAM,IAAMC,EAAIE,OAFzB,2CAAH,wDAIpB,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAkB3G,MAAM,aAAa4G,QAAS,cAAC,IAAD,CAC1CC,KAAK,QACL7G,MAAO6F,EAAcV,UACrBlF,SAAU,SAAAlB,GAAK,OAAIgH,GAAgB,WAAQM,EAAe,YAAatH,SAG1E+H,eAAe,QAAQ/G,MAAM,eAC9B,cAAC4G,EAAA,EAAD,CAAkB3G,MAAM,mBAAmB4G,QAAS,cAAC,IAAD,CAChDC,KAAK,QACL7G,MAAO6F,EAAcR,gBACrBpF,SAAU,SAAAlB,GAAK,OAAIgH,GAAgB,WAAQM,EAAe,kBAAmBtH,SAGhF+H,eAAe,QAAQ/G,MAAM,qBAE9B,cAAC4G,EAAA,EAAD,CAAkB3G,MAAM,eAAe4G,QAAS,cAAC,IAAD,CAC5CC,KAAK,QACL7G,MAAO6F,EAAcT,YACrBnF,SAAU,SAAAlB,GAAK,OAAIgH,GAAgB,WAAQM,EAAe,cAAetH,SAG5E+H,eAAe,QAAQ/G,MAAM,oB,uBC1EpC/B,GAAYC,aAAW,SAACC,GAAD,MAAY,CAIrC8C,qBAAsB,CAClB/B,WAAW,UACXF,MAAM,aAIP,SAASgI,GAAkB1H,GAC9B,IAAMG,EAAUxB,KAChB,OACI,qBAAK4B,UAAWJ,EAAQwB,qBAAxB,SAEI,cAAC,IAAD,CAAmBgG,SAAS,OAAO9B,MAAO+B,KAA1C,SACK5H,EAAM6H,e,cCTvB,SAASpE,GAASzD,GAAQ,IACd0D,EAAqC1D,EAArC0D,SAAU/C,EAA2BX,EAA3BW,MAAOL,EAAoBN,EAApBM,MAAUqD,EADd,YACwB3D,EADxB,8BAGrB,OACI,6CACI4D,KAAK,WACLC,OAAQlD,IAAUL,EAClBG,GAAE,0BAAqBH,GACvBwD,kBAAA,qBAA+BxD,IAC3BqD,GALR,aAOKhD,IAAUL,GACP,cAACyD,EAAA,EAAD,CAAKC,EAAG,EAAR,SACI,cAACC,EAAA,EAAD,UAAaP,SAajC,SAASQ,GAAU5D,GACf,MAAO,CACHG,GAAG,cAAD,OAAgBH,GAClB,gBAAgB,mBAAhB,OAAoCA,IAI5C,IAAM3B,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCiJ,KAAM,CACFlI,WAAY,OAEhBmI,UAAW,CACPjI,UAAW,QAIJ,SAASqE,KACpB,IAAMhE,EAAUxB,KADW,EAEKwD,mBAAS,GAFd,mBAEpB6F,EAFoB,KAEVC,EAFU,OAGK9F,mBAAS,IAHd,mBAGpBsD,EAHoB,KAGVc,EAHU,OAIKpE,mBAAS,IAJd,mBAIpB+F,EAJoB,KAIVC,EAJU,OAKOhG,mBAAS,IALhB,mBAKpBlC,EALoB,KAKTC,EALS,OAMKiC,mBAAS,IANd,mBAMViG,GANU,WAOrBC,EAAiB,SAAC7D,GACpB4D,EAAYE,KAAKC,UAAU/D,KAI/B,OACI,gCACI,cAACP,EAAA,EAAD,CAAY/C,QAAQ,KAAKwD,UAAU,KAAnC,oCAGA,uBACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACxB,QAAS,EAAzB,UACI,cAACuB,EAAA,EAAD,CAAME,MAAI,EAAC2D,GAAI,GAAI1D,GAAI,EAAvB,SACI,eAACC,EAAA,EAAD,CAAOxE,UAAWJ,EAAQ+C,MAA1B,UACI,cAAC8B,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAMvE,MAAOqH,EAAUpH,SAAU,SAACC,EAAGuE,GAAJ,OAAiB6C,EAAY7C,IAAWC,aAAW,sBAApF,UACI,cAACC,EAAA,EAAD,aAAK5E,MAAM,WAAcwD,GAAU,KACnC,cAACoB,EAAA,EAAD,aAAK5E,MAAM,YAAewD,GAAU,UAI5C,cAAC,GAAD,CAAUvD,MAAOqH,EAAU1H,MAAO,EAAlC,SACI,cAACP,EAAD,CAAWE,UAAWA,EAAWc,eAAgBsH,EAAgBnI,aAAcA,MAEnF,cAAC,GAAD,CAAUS,MAAOqH,EAAU1H,MAAO,EAAlC,SACI,cAACgG,EAAD,CAAgBb,SAAUA,EAAUc,YAAaA,EAAaxF,eAAgBsH,WAI1F,cAAC1D,EAAA,EAAD,CAAME,MAAI,EAACgB,MAAO,CAAE9G,MAAO,OAAS+F,GAAI,EAAxC,SACI,cAAC,EAAD,CAAWW,SAAUA,EAAUxF,UAAWA,SAGlD,cAACgB,EAAA,EAAD,CAAQV,UAAWJ,EAAQ4H,UAAW7G,QAAQ,YAAYxB,MAAM,YAAYyB,QAAS,WAAQgH,EAAYM,SAASC,eAAe,gBAAgB7G,YAAclB,MAAM,OAArK,6BACCuH,EACG,gCACI,cAACR,GAAD,CAAmBG,WAAYK,IAC/B,cAAC,mBAAD,CACAS,OAAQ,WAAKC,MAAM,wBACnBxG,KAAM8F,EAFN,SAGA,cAACjH,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,GAAlC,oCAGJ,M,OCzEDmJ,OAvBf,WACE,OACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,UACE,qBAAKvI,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwI,IAAE,EACTC,OAAK,EACLC,KAAK,IACLvE,UAAWP,IAEV,cAAC,IAAD,CAAO4E,IAAE,EACVC,OAAK,EACLC,KAAK,sBACLvE,UAAWwE,eCjBvBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFZ,SAASC,eAAe,W","file":"static/js/main.743801bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport { TextField, Button } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    input : {\n        width: \"45%\",\n        marginRight:\"5%\"\n    },\n    question:{\n        margin: \"20px 0\",\n        display: \"flex\"\n    },\n    removeBtn:{\n        maxWidth:\"48px !important\",\n        minWidth:\"48px !important\",\n        borderRadius:\"50%\",\n        border:\"none\",\n        fontWeight:\"bolder\",\n        color:\"white\",\n        fontSize:20,\n        background:\"#dc3545\"\n    },\n    button:{\n        marginTop:30\n    }\n}));\n\nconst generateKey = (pre) => {\n    return `${ pre }_${ new Date().getTime() }`;\n}\n\nexport function  Questions(props){\n    const {questions, setQuestions} = props\n    const classes = useStyles();\n    const handleQuestionChange = () => {}\n\n    const addQuestion = () => {\n        questions.push({ question: \"\", answer:\"\" });\n        setQuestions([...questions]);\n        props.updateJsonBody()\n      };\n    const deleteQuestion = (id) => {\n        const newQ =  questions.filter((el, index) => {\n            return index !== id;\n        })\n        setQuestions(newQ);\n        props.updateJsonBody(newQ)\n    }\n    return(\n        <div>\n            {questions.map((el, index) => {\n                return(\n                    <div key={index} className={classes.question}>\n                        <TextField\n                        key={\"q_\" + index}\n                        id={\"q_\" + index}\n                        label=\"Question\"\n                        value={el.question}\n                        className={classes.input}\n                        onChange={(e)=>{\n                            questions[index].question = e.target.value\n                            setQuestions([...questions])\n                            props.updateJsonBody(questions)\n                        }}\n                        />\n                        <TextField\n                        key={\"a_\" + index}\n                        id={\"a_\" + index}\n                        label=\"Answer\"\n                        value={el.answer}\n                        className={classes.input}\n                        onChange={(e)=>{\n                            questions[index].answer = e.target.value\n                            setQuestions([...questions])\n                            props.updateJsonBody(questions)\n                        }}\n                        />\n                        <Button variant=\"contained\" color=\"secondary\" onClick={()=>{deleteQuestion(index)}} className={classes.removeBtn}>-</Button>\n                    </div>\n                );\n            })}\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={addQuestion}>Add Question</Button>\n        </div>\n    )\n}","import { makeStyles } from '@material-ui/core';\nimport Highlight from 'react-highlight'\nvar JSONPrettyMon = require('react-json-pretty/dist/1337');\nvar JSONPretty = require('react-json-pretty');\n\n\nconst useStyles = makeStyles((theme) => ({\n    // generatedCode:{\n    //     minHeight:100\n    // },\n    generatedCodeWrapper: {\n        background:\"#1e1e1e\",\n        color:\"white\"\n    }\n}));\n\nexport function GeneratedCode(props){\n    const classes = useStyles();\n    return(\n        <div className={classes.generatedCodeWrapper}>\n            <Highlight innerHTML={false}>{`<title>${props.title} - Frequently Asked Questions(FAQ)</title>`}</Highlight>\n            <Highlight innerHTML={false}>{`<script type=\"application/ld+json\">`}</Highlight>\n            <JSONPretty className={classes.generatedCode}  theme={JSONPrettyMon} id=\"json-pretty\" data={props.questions}></JSONPretty>\n            <Highlight innerHTML={false}>{`</script>`}</Highlight>\n        </div>\n        )\n}","import React, { useState } from 'react';\nimport { TextField, Button } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    textField:{\n        width:'100%'\n    },\n    button:{\n        marginTop:30\n    }\n}));\n\n\n\n\nexport function Html(props) {\n    const classes = useStyles();\n    const [text, setText] = useState(\"\");\n    const {questions, setQuestions, updateJsonBody} = props;\n    \n    const generateHTML = (text)=>{\n        const questionRegex = \"<h3>(.|\\n)*?<\\/h3>\";    \n        const answerRegex = \"<\\/h3>(.|\\n)*?<h3>\";\n        text = text.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        console.log(text);\n        const questionsRes = [...text.matchAll(questionRegex)].map(el=>{return el[0].replace(/<\\/?h3>/g,'');})\n        const answersRes = [...text.matchAll(answerRegex)].map(el=>{return el[0].replace(/<\\/?h3>/g,'');})\n        let newQuestions = []\n        questionsRes.forEach((el, indx) => {\n            newQuestions.push({\n                question: el,\n                answer: answersRes[indx]\n            })\n        })\n        setQuestions(newQuestions);\n        updateJsonBody(newQuestions);\n    }\n    return (\n        <div>\n            <TextField\n                id=\"filled-multiline-static\"\n                label=\"HTML\"\n                multiline\n                rows={20}\n                value={text}\n                className={classes.textField}\n                variant=\"filled\"\n                onChange={(el)=>{setText(el.target.value)}}\n            />\n            <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick={() => {generateHTML(text + \"<h3>\")}}>Generate</Button>\n\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Typography, Paper, TextField, Box, AppBar, Tabs, Tab } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Grid from '@material-ui/core/Grid'\nimport { Questions } from \"../components/Question\"\nimport { GeneratedCode } from '../components/GeneratedCode';\nimport { Html } from '../components/Html';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n    input: {\n        width: \"100%\"\n    },\n    titleInput: {\n        width: \"90%\",\n        margin:'5%'\n    }\n}));\nconst jsonBodyStructure = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    \"mainEntity\": []\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nexport default function Home() {\n    const [value, setValue] = useState(0);\n    const classes = useStyles();\n    const handleTitleChange = (v) => {\n        console.log(v);\n    }\n\n    const handleTabChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const [title, setTitle] = useState(\"\");\n    const [questions, setQuestions] = useState([]);\n    const [jsonBody, setJsonBody] = useState(jsonBodyStructure)\n    const updateJsonBody = (q) => {\n        jsonBody.mainEntity = (q || questions).map(el => {\n            return {\n                \"@type\": \"Question\",\n                \"name\": el.question,\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": el.answer\n                }\n            }\n        })\n        setJsonBody(jsonBody)\n    }\n\n    return (\n        <div>\n            <Typography variant=\"h3\" component=\"h3\">\n                SEO Schema generator\n            </Typography>\n            <hr />\n            <Grid container spacing={3}>\n                <Grid item md={6}>\n                    <Paper className={classes.paper}>\n                        <AppBar position=\"static\">\n                            <Tabs value={value} onChange={handleTabChange} aria-label=\"simple tabs example\">\n                                <Tab label=\"Builder\" {...a11yProps(0)} />\n                                <Tab label=\"HTML\" {...a11yProps(1)} />\n                            </Tabs>\n                        </AppBar>\n                        <TextField\n                                id=\"page-title\"\n                                label=\"Title\"\n                                className={classes.titleInput}\n                                value={title}\n                                onChange={(v) => { setTitle(v.target.value); console.log(v) }}\n                            />\n                        <TabPanel value={value} index={0}>\n                            <Questions questions={questions} updateJsonBody={updateJsonBody} setQuestions={setQuestions} />\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <Html questions={questions} updateJsonBody={updateJsonBody} setQuestions={setQuestions} />\n                    </TabPanel>\n                    </Paper>\n                </Grid>\n                <Grid item md={6}>\n                    <GeneratedCode title={title} questions={jsonBody} />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { TextField, Button } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\nimport a from \"./css/template1.css\"\nimport $ from 'jquery'\n\n// const useStyles = makeStyles((theme) => ({\n//     textField:{\n//         width:'100%'\n//     },\n//     button:{\n//         marginTop:30\n//     }\n// }));\n\n\n\n\nexport default function template(props) {\n    const { questions, settings } = props;\n\n    return (\n        \n        <section id=\"code-wrapper\">\n            <style>\n                {CSS}\n            </style>\n            <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n            <script>\n                {javascript}\n            </script>\n            <div className=\"\" >\n\n                <ul className=\"t1-faq-list\" style={{color: settings.textColor}}>\n                    {questions.map((el, index) => {\n                        return (\n\n                            <li key={index} style={{borderColor: settings.borderColor, backgroundColor: settings.backgroundColor}} >\n                                <h3  onClick={(e)=>{$(e.target).parent('li').toggleClass('t1-the-active').find('.t1-faq-text').slideToggle();}} className=\"t1-faq-heading\"> {el.question}</h3>\n                                <p className=\"t1-read t1-faq-text\">\n                                   {el.answer}\n                                </p>\n                            </li>\n                        )\n                    })}\n\n                </ul>\n            </div>\n        </section>\n    )\n}\n\nconst javascript = `\n    $(()=>{\n        $('.t1-faq-heading').click(function () {\n        $(this).parent('li').toggleClass('t1-the-active').find('.t1-faq-text').slideToggle();\n        });\n    })\n`;\nconst CSS =`body {\n    margin:0;\n    padding:0;\n    font-family: 'arial', sans-serif;\n\n}\n.t1-faq-list {\n    list-style: none;\n    padding: 0;\n}\n.t1-faq-list li {\n    margin: 30px 0;\n    border: 1px solid rgb(205, 205, 205);\n    padding: 27px 30px;\n    margin: 0px auto 30px;\n    text-align: left;\n}\n.t1-faq-list .t1-faq-heading::before {\n    content: '+';\n    font-size: 40px;\n    display: block;\n    position: absolute;\n    right:0;\n    top: -8px;\n}\n.t1-faq-list .t1-the-active .t1-faq-heading::before {\n    content: '-'; \n}\n.t1-faq-heading {\n    position: relative;\n    cursor: pointer;\n    font-size: 22px;\n    font-weight: 600;\n    margin:0;\n}\n.t1-faq-heading:hover {\n}\n.t1-faq-text {\n    display: none;\n}\n.t1-container {\n    width:500px;\n    max-width: 1200px;\n    margin: auto;\n}\n.t1-art-box svg {\n    width:100%;\n}\n.t1-row {\n    display:flex;\n}\n.t1-row .t1-col {\n    flex-basis: 50%;\n}\n.t1-read {\n    font-size: 16px;\n    line-height: 1.5;\n    margin-top: 25px;\n}`","import React, { useState } from 'react';\nimport { TextField, Button, FormControlLabel, FormControl, FormLabel } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\nimport { ColorPicker } from 'material-ui-color';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        width: \"45%\",\n        marginRight: \"5%\"\n    },\n    question: {\n        margin: \"20px 0\",\n        display: \"flex\"\n    },\n    removeBtn: {\n        maxWidth: \"48px !important\",\n        minWidth: \"48px !important\",\n        borderRadius: \"50%\",\n        border: \"none\",\n        fontWeight: \"bolder\",\n        color: \"white\",\n        fontSize: 20,\n        background: \"#dc3545\"\n    },\n    button: {\n        marginTop: 30\n    }\n}));\n\nconst generateKey = (pre) => {\n    return `${pre}_${new Date().getTime()}`;\n}\n\nexport function SettingsPannel(props) {\n    const { setSettings, settings } = props;\n    const [defaultValues, setDefaultValues] = useState({\n        textColor: (settings.textColor || \"#000000\"),\n        backgroundColor: (settings.backgroundColor || \"#ffffff\"),\n        borderColor: (settings.borderColor || \"#000000\"),\n    });\n\n    const timeoutFunction = (func) => {\n        if (window.currentRunningFunc) {\n            clearTimeout(window.currentRunningFunc);\n        }\n        window.currentRunningFunc = setTimeout(() => {\n            func();\n            window.currentRunningFunc = false;\n        }, 100);\n\n    }\n\n    const handleOnChange = async (key, val) => {\n        setDefaultValues({ ...defaultValues, [key]: val });\n        setSettings({ ...settings, [key]: \"#\" + val.hex });\n    }\n    return (\n        <FormControl>\n            <FormControlLabel value=\"Font color\" control={<ColorPicker\n                name='color'\n                value={defaultValues.textColor}\n                onChange={color => timeoutFunction(() => { handleOnChange(\"textColor\", color) })}\n\n            />\n            }labelPlacement='start' label=\"Font color\" />\n            <FormControlLabel value=\"Background color\" control={<ColorPicker\n                name='color'\n                value={defaultValues.backgroundColor}\n                onChange={color => timeoutFunction(() => { handleOnChange(\"backgroundColor\", color) })}\n\n            />\n            }labelPlacement='start' label=\"Background color\" />\n\n            <FormControlLabel value=\"Border color\" control={<ColorPicker\n                name='color'\n                value={defaultValues.borderColor}\n                onChange={color => timeoutFunction(() => { handleOnChange(\"borderColor\", color) })}\n\n            />\n            }labelPlacement='start' label=\"Border color\" />\n            \n           \n\n        </FormControl>\n    );\n}","import { makeStyles } from '@material-ui/core';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\nconst useStyles = makeStyles((theme) => ({\n    // generatedCode:{\n    //     minHeight:100\n    // },\n    generatedCodeWrapper: {\n        background:\"#1e1e1e\",\n        color:\"white\"\n    }\n}));\n\nexport function GeneratedHTMLCode(props){\n    const classes = useStyles();\n    return(\n        <div className={classes.generatedCodeWrapper}>\n            \n            <SyntaxHighlighter language=\"html\" style={dark}>\n                {props.codeString}\n            </SyntaxHighlighter>\n\n            \n        </div>\n        )\n}","import React, { useState } from 'react';\nimport { Typography, Paper, TextField, Box, AppBar, Tabs, Tab, Button } from \"@material-ui/core\"\nimport { makeStyles } from '@material-ui/core/styles'\nimport PropTypes from 'prop-types'\nimport Grid from '@material-ui/core/Grid'\nimport Template1 from \"../htmlCompTemplate/Template1\";\nimport { Questions } from \"../components/Question\"\nimport { SettingsPannel } from \"../components/SettingsPannel\"\nimport { GeneratedHTMLCode } from \"../components/GeneratedHTMLCode\"\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    body: {\n        background: \"red\"\n    },\n    genButton: {\n        marginTop: 30\n    }\n}));\n\nexport default function Home() {\n    const classes = useStyles();\n    const [tabValue, setTabValue] = useState(0);\n    const [settings, setSettings] = useState({});\n    const [HTMLCode, setHTMLCode] = useState(\"\");\n    const [questions, setQuestions] = useState([]);\n    const [htmlBody, setHtmlBody] = useState(\"\");\n    const updateHtmlBody = (q) => {\n        setHtmlBody(JSON.stringify(q));\n    }\n\n    //Htmlst [title, setTitle] = useState(\"\");\n    return (\n        <div>\n            <Typography variant=\"h3\" component=\"h3\">\n                SEO FAQ Code generator\n            </Typography>\n            <hr />\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                    <Paper className={classes.paper}>\n                        <AppBar position=\"static\">\n                            <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)} aria-label=\"simple tabs example\">\n                                <Tab label=\"Builder\" {...a11yProps(0)} />\n                                <Tab label=\"Settings\" {...a11yProps(1)} />\n                            </Tabs>\n                        </AppBar>\n\n                        <TabPanel value={tabValue} index={0}>\n                            <Questions questions={questions} updateJsonBody={updateHtmlBody} setQuestions={setQuestions} />\n                        </TabPanel>\n                        <TabPanel value={tabValue} index={1}>\n                            <SettingsPannel settings={settings} setSettings={setSettings} updateJsonBody={updateHtmlBody} />\n                        </TabPanel>\n                    </Paper>\n                </Grid>\n                <Grid item style={{ width: \"90%\" }} md={6}>\n                    <Template1 settings={settings} questions={questions} />\n                </Grid>\n            </Grid>\n            <Button className={classes.genButton} variant=\"contained\" color=\"secondary\" onClick={() => { setHTMLCode(document.getElementById(\"code-wrapper\").innerHTML) }} value=\"Test\"> Generate code </Button>\n            {HTMLCode ? (\n                <div>\n                    <GeneratedHTMLCode codeString={HTMLCode} />\n                    <CopyToClipboard \n                    onCopy={()=>{alert(\"Copied to clipboard\")}}\n                    text={HTMLCode}>\n                    <Button variant=\"contained\" color=\"\">Copy to clipboard</Button>\n                    </CopyToClipboard>\n                </div>\n            ) : \"\"}\n        </div>\n    )\n}","import logo from './logo.svg'\nimport './App.css'\nimport { ThemeProvider } from \"@material-ui/core/styles\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport Home from \"./pages/home\";\nimport HtmlGenerator from \"./pages/htmlGenerator\";\nimport { Provider } from 'react-redux'\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Router>\n        <div className=\"container\">\n          <Switch>\n            <Route ex\n            exact\n            path=\"/\"\n            component={Home}\n             />\n             <Route ex\n            exact\n            path=\"/faq-html-generator\"\n            component={HtmlGenerator} \n             />\n          </Switch>\n        </div>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}