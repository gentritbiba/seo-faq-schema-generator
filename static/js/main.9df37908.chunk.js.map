{"version":3,"sources":["logo.svg","components/Question.js","components/GeneratedCode.js","components/Html.js","pages/home.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","input","width","marginRight","question","margin","display","removeBtn","maxWidth","minWidth","borderRadius","border","fontWeight","color","fontSize","background","button","marginTop","Questions","props","questions","setQuestions","classes","map","el","index","className","TextField","id","label","value","onChange","e","target","updateJsonBody","answer","Button","variant","onClick","newQ","filter","deleteQuestion","push","JSONPrettyMon","require","JSONPretty","generatedCodeWrapper","GeneratedCode","innerHTML","title","generatedCode","data","textField","Html","useState","text","setText","multiline","rows","replace","console","log","questionsRes","matchAll","answersRes","newQuestions","forEach","indx","generateHTML","paper","padding","spacing","palette","secondary","titleInput","jsonBodyStructure","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","Home","setValue","setTitle","jsonBody","setJsonBody","q","mainEntity","component","Grid","container","item","md","Paper","AppBar","position","Tabs","event","newValue","aria-label","Tab","v","App","ThemeProvider","ex","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9df37908.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { TextField, Button } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input : {\r\n        width: \"45%\",\r\n        marginRight:\"5%\"\r\n    },\r\n    question:{\r\n        margin: \"20px 0\",\r\n        display: \"flex\"\r\n    },\r\n    removeBtn:{\r\n        maxWidth:\"48px !important\",\r\n        minWidth:\"48px !important\",\r\n        borderRadius:\"50%\",\r\n        border:\"none\",\r\n        fontWeight:\"bolder\",\r\n        color:\"white\",\r\n        fontSize:20,\r\n        background:\"#dc3545\"\r\n    },\r\n    button:{\r\n        marginTop:30\r\n    }\r\n}));\r\n\r\nconst generateKey = (pre) => {\r\n    return `${ pre }_${ new Date().getTime() }`;\r\n}\r\n\r\nexport function  Questions(props){\r\n    const {questions, setQuestions} = props\r\n    const classes = useStyles();\r\n    const handleQuestionChange = () => {}\r\n\r\n    const addQuestion = () => {\r\n        questions.push({ question: \"\", answer:\"\" });\r\n        setQuestions([...questions]);\r\n        props.updateJsonBody()\r\n      };\r\n    const deleteQuestion = (id) => {\r\n        const newQ =  questions.filter((el, index) => {\r\n            return index !== id;\r\n        })\r\n        setQuestions(newQ);\r\n        props.updateJsonBody(newQ)\r\n    }\r\n    return(\r\n        <div>\r\n            {questions.map((el, index) => {\r\n                return(\r\n                    <div className={classes.question}>\r\n                        <TextField\r\n                        key={\"q_\" + index}\r\n                        id={\"q_\" + index}\r\n                        label=\"Question\"\r\n                        value={el.question}\r\n                        className={classes.input}\r\n                        onChange={(e)=>{\r\n                            questions[index].question = e.target.value\r\n                            setQuestions([...questions])\r\n                            props.updateJsonBody()\r\n                        }}\r\n                        />\r\n                        <TextField\r\n                        key={\"a_\" + index}\r\n                        id={\"a_\" + index}\r\n                        label=\"Answer\"\r\n                        value={el.answer}\r\n                        className={classes.input}\r\n                        onChange={(e)=>{\r\n                            questions[index].answer = e.target.value\r\n                            setQuestions([...questions])\r\n                            props.updateJsonBody()\r\n                        }}\r\n                        />\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={()=>{deleteQuestion(index)}} className={classes.removeBtn}>-</Button>\r\n                    </div>\r\n                );\r\n            })}\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={addQuestion}>Add Question</Button>\r\n        </div>\r\n    )\r\n}","import { makeStyles } from '@material-ui/core';\r\nimport Highlight from 'react-highlight'\r\nvar JSONPrettyMon = require('react-json-pretty/dist/1337');\r\nvar JSONPretty = require('react-json-pretty');\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    // generatedCode:{\r\n    //     minHeight:100\r\n    // },\r\n    generatedCodeWrapper: {\r\n        background:\"#1e1e1e\",\r\n        color:\"white\"\r\n    }\r\n}));\r\n\r\nexport function GeneratedCode(props){\r\n    const classes = useStyles();\r\n    return(\r\n        <div className={classes.generatedCodeWrapper}>\r\n            <Highlight innerHTML={false}>{`<title>${props.title} - Frequently Asked Questions(FAQ)</title>`}</Highlight>\r\n            <Highlight innerHTML={false}>{`<script type=\"application/ld+json\">`}</Highlight>\r\n            <JSONPretty className={classes.generatedCode}  theme={JSONPrettyMon} id=\"json-pretty\" data={props.questions}></JSONPretty>\r\n            <Highlight innerHTML={false}>{`</script>`}</Highlight>\r\n            \r\n        </div>\r\n        )\r\n}","import React, { useState } from 'react';\r\nimport { TextField, Button } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    textField:{\r\n        width:'100%'\r\n    },\r\n    button:{\r\n        marginTop:30\r\n    }\r\n}));\r\n\r\n\r\n\r\n\r\nexport function Html(props) {\r\n    const classes = useStyles();\r\n    const [text, setText] = useState(\"\");\r\n    const {questions, setQuestions, updateJsonBody} = props;\r\n    \r\n    const generateHTML = (text)=>{\r\n        const questionRegex = \"<h3>(.|\\n)*?<\\/h3>\";    \r\n        const answerRegex = \"<\\/h3>(.|\\n)*?<h3>\";\r\n        text = text.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n        console.log(text);\r\n        const questionsRes = [...text.matchAll(questionRegex)].map(el=>{return el[0].replace(/<\\/?h3>/g,'');})\r\n        const answersRes = [...text.matchAll(answerRegex)].map(el=>{return el[0].replace(/<\\/?h3>/g,'');})\r\n        let newQuestions = []\r\n        questionsRes.forEach((el, indx) => {\r\n            newQuestions.push({\r\n                question: el,\r\n                answer: answersRes[indx]\r\n            })\r\n        })\r\n        setQuestions(newQuestions);\r\n        updateJsonBody(newQuestions);\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                id=\"filled-multiline-static\"\r\n                label=\"HTML\"\r\n                multiline\r\n                rows={20}\r\n                value={text}\r\n                className={classes.textField}\r\n                variant=\"filled\"\r\n                onChange={(el)=>{setText(el.target.value)}}\r\n            />\r\n            <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick={() => {generateHTML(text + \"<h3>\")}}>Generate</Button>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Typography, Paper, TextField, Box, AppBar, Tabs, Tab } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { Questions } from \"../components/Question\"\r\nimport { GeneratedCode } from '../components/GeneratedCode';\r\nimport { Html } from '../components/Html';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    input: {\r\n        width: \"100%\"\r\n    },\r\n    titleInput: {\r\n        width: \"90%\",\r\n        margin:'5%'\r\n    }\r\n}));\r\nconst jsonBodyStructure = {\r\n    \"@context\": \"https://schema.org\",\r\n    \"@type\": \"FAQPage\",\r\n    \"mainEntity\": []\r\n}\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nexport default function Home() {\r\n    const [value, setValue] = useState(0);\r\n    const classes = useStyles();\r\n    const handleTitleChange = (v) => {\r\n        console.log(v);\r\n    }\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const [title, setTitle] = useState(\"\");\r\n    const [questions, setQuestions] = useState([]);\r\n    const [jsonBody, setJsonBody] = useState(jsonBodyStructure)\r\n    const updateJsonBody = (q) => {\r\n        jsonBody.mainEntity = (q || questions).map(el => {\r\n            return {\r\n                \"@type\": \"Question\",\r\n                \"name\": el.question,\r\n                \"acceptedAnswer\": {\r\n                    \"@type\": \"Answer\",\r\n                    \"text\": el.answer\r\n                }\r\n            }\r\n        })\r\n        setJsonBody(jsonBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\">\r\n                SEO Schema generator\r\n            </Typography>\r\n            <hr />\r\n            <Grid container spacing={3}>\r\n                <Grid item md={6}>\r\n                    <Paper className={classes.paper}>\r\n                        <AppBar position=\"static\">\r\n                            <Tabs value={value} onChange={handleTabChange} aria-label=\"simple tabs example\">\r\n                                <Tab label=\"Builder\" {...a11yProps(0)} />\r\n                                <Tab label=\"HTML\" {...a11yProps(1)} />\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <TextField\r\n                                id=\"page-title\"\r\n                                label=\"Title\"\r\n                                className={classes.titleInput}\r\n                                value={title}\r\n                                onChange={(v) => { setTitle(v.target.value); console.log(v) }}\r\n                            />\r\n                        <TabPanel value={value} index={0}>\r\n                            <Questions questions={questions} updateJsonBody={updateJsonBody} setQuestions={setQuestions} />\r\n                        </TabPanel>\r\n                        <TabPanel value={value} index={1}>\r\n                            <Html questions={questions} updateJsonBody={updateJsonBody} setQuestions={setQuestions} />\r\n                    </TabPanel>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item md={6}>\r\n                    <GeneratedCode title={title} questions={jsonBody} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import logo from './logo.svg'\r\nimport './App.css'\r\nimport { ThemeProvider } from \"@material-ui/core/styles\"\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport Home from \"./pages/home\";\r\nimport { Provider } from 'react-redux'\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <Router>\r\n        <div className=\"container\">\r\n          <Switch>\r\n            <Route ex\r\n            exact\r\n            path=\"/\"\r\n            component={Home}\r\n             />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}